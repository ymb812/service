import streamlit as st
import requests
from typing import Optional
import json
from settings.settings import settings
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api/v1"
HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    "X-API-KEY": f"{settings.x_auth_token.get_secret_value()}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="IT Career Explorer",
    page_icon="üíº",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-title {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .subtitle {
        text-align: center;
        color: #666;
        font-size: 1.2rem;
        margin-bottom: 3rem;
    }

    .card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }

    .card h4 {
        color: #2c3e50;
        margin: 0;
    }

    .schedule-item {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        color: #2c3e50;
    }

    .schedule-item strong {
        color: #667eea;
    }

    .tech-badge {
        display: inline-block;
        background: #667eea;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        margin: 0.2rem;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .sound-item {
        background: #fff3cd;
        padding: 0.8rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 3px solid #ffc107;
        color: #856404;
    }
</style>
""", unsafe_allow_html=True)


# API —Ñ—É–Ω–∫—Ü–∏–∏
def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5, headers=HEADERS)
        return response.status_code == 200
    except:
        return False


def start_session(user_message: str, user_id: Optional[int] = None) -> dict:
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    payload = {
        "user_message": user_message,
        "user_id": user_id
    }
    response = requests.post(f"{API_BASE_URL}/start", json=payload, headers=HEADERS)
    response.raise_for_status()
    return response.json()


def submit_answer(session_id: int, answer: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    payload = {
        "session_id": session_id,
        "answer": answer
    }
    response = requests.post(f"{API_BASE_URL}/answer", json=payload, headers=HEADERS)
    response.raise_for_status()
    return response.json()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'step' not in st.session_state:
    st.session_state.step = 'initial'
if 'session_id' not in st.session_state:
    st.session_state.session_id = None
if 'clarification_question' not in st.session_state:
    st.session_state.clarification_question = None
if 'profile' not in st.session_state:
    st.session_state.profile = None
if 'initial_message' not in st.session_state:
    st.session_state.initial_message = ""


def reset_session():
    """–°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏"""
    st.session_state.step = 'initial'
    st.session_state.session_id = None
    st.session_state.clarification_question = None
    st.session_state.profile = None
    st.session_state.initial_message = ""


# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<div class="main-title">üöÄ IT Career Explorer</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">–£–∑–Ω–∞–π, –∫–∞–∫–æ–≤–æ —ç—Ç–æ ‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å –≤ IT</div>', unsafe_allow_html=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    if check_api_health():
        st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.info(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {API_BASE_URL}")

    if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        reset_session()
        st.rerun()

    st.divider()
    st.caption("–í–µ—Ä—Å–∏—è 1.0")

# ===== –®–ê–ì 1: –ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å =====
if st.session_state.step == 'initial':
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        st.markdown("### üí¨ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∫–∞—Ä—å–µ—Ä–µ –≤ IT?")

        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"):
            st.markdown("""
            - –ö–∞–∫–æ–≤–æ —ç—Ç–æ ‚Äî –±—ã—Ç—å frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ?
            - –ß—Ç–æ –¥–µ–ª–∞–µ—Ç DevOps-–∏–Ω–∂–µ–Ω–µ—Ä –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?
            - –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Data Scientist –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ?
            - –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞—Ä—å–µ—Ä—É QA-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–∞
            - –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ Tech Lead?
            """)

        user_question = st.text_area(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
            height=100,
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–æ–≤–æ —ç—Ç–æ ‚Äî –±—ã—Ç—å backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ?",
            max_chars=500,
            value=st.session_state.initial_message
        )

        if st.button("üîç –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", type="primary", use_container_width=True):
            if len(user_question.strip()) < 10:
                st.error("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            else:
                with st.spinner("ü§î –§–æ—Ä–º–∏—Ä—É—é —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."):
                    try:
                        result = start_session(user_question)
                        st.session_state.session_id = result['session_id']
                        st.session_state.clarification_question = result['question']
                        st.session_state.initial_message = user_question
                        st.session_state.step = 'clarification'
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ===== –®–ê–ì 2: –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å =====
elif st.session_state.step == 'clarification':
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        st.markdown("### üéØ –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏")

        st.info(f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {st.session_state.initial_message}")

        st.markdown(f"""
        <div class="card">
            <h4>‚ùì {st.session_state.clarification_question}</h4>
        </div>
        """, unsafe_allow_html=True)

        user_answer = st.text_input(
            "–í–∞—à –æ—Ç–≤–µ—Ç:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–∞",
            max_chars=200
        )

        col_a, col_b = st.columns(2)

        with col_a:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.step = 'initial'
                st.rerun()

        with col_b:
            if st.button("‚ú® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", type="primary", use_container_width=True):
                if len(user_answer.strip()) < 1:
                    st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å.")
                else:
                    with st.spinner("üé® –°–æ–∑–¥–∞—é –≤–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã."):
                        try:
                            profile = submit_answer(
                                st.session_state.session_id,
                                user_answer
                            )
                            st.session_state.profile = profile
                            st.session_state.step = 'result'
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ===== –®–ê–ì 3: –†–µ–∑—É–ª—å—Ç–∞—Ç =====
elif st.session_state.step == 'result':
    profile = st.session_state.profile

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    st.markdown(f"## üíº {profile['position_title']}")

    st.divider()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìä –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å")
        st.markdown(f"""
        <div class="card">
            <h4>{profile['career_growth']}</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("### ‚öñÔ∏è Work-Life Balance")
        balance = profile['balance_score']
        st.markdown(f"""
        <div class="card">
            <h2 style="text-align: center; color: #667eea;">{balance}</h2>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("### üéÅ –ì–ª–∞–≤–Ω–∞—è –ø–æ–ª—å–∑–∞")
        st.markdown(f"""
        <div class="card">
            <h4>{profile['benefit']}</h4>
        </div>
        """, unsafe_allow_html=True)

    st.divider()

    # –ó–≤—É–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    st.markdown("### üîä –ó–≤—É–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
    for sound in profile['sounds']:
        st.markdown(f"""
        <div class="sound-item">
            üéµ {sound}
        </div>
        """, unsafe_allow_html=True)

    st.divider()

    # –¢–∏–ø–∏—á–Ω—ã–π –¥–µ–Ω—å
    st.markdown("### üìÖ –¢–∏–ø–∏—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å")

    for item in profile['typical_day']:
        st.markdown(f"""
        <div class="schedule-item">
            <strong>‚è∞ {item['time']}</strong><br>
            {item['activity']}
        </div>
        """, unsafe_allow_html=True)

    st.divider()

    # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    st.markdown("### üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫")
    tech_html = "".join([f'<span class="tech-badge">{tech}</span>' for tech in profile['tech_stack']])
    st.markdown(tech_html, unsafe_allow_html=True)

    st.divider()

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.markdown("### üé® –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è")
    for visual in profile['visual']:
        st.markdown(f"- üñºÔ∏è {visual}")

    st.divider()

    # –î–µ–π—Å—Ç–≤–∏—è
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", use_container_width=True):
            reset_session()
            st.rerun()

    with col2:
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        json_data = json.dumps(profile, ensure_ascii=False, indent=2)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å JSON",
            data=json_data,
            file_name=f"career_profile_{profile['session_id']}.json",
            mime="application/json",
            use_container_width=True
        )

    with col3:
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏
        if st.button("üìã ID —Å–µ—Å—Å–∏–∏", use_container_width=True):
            st.code(f"Session ID: {profile['session_id']}")

# Footer
st.divider()
st.markdown("""
<div style="text-align: center; color: #999; padding: 2rem;">
    Made with ‚ù§Ô∏è using Streamlit & Ollama<br>
    <small>Powered by AI for IT professionals</small>
</div>
""", unsafe_allow_html=True)
