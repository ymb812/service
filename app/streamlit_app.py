import streamlit as st
import requests
from typing import Optional
import json
from settings.settings import settings
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api/v1"
HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    "X-API-KEY": f"{settings.x_auth_token.get_secret_value()}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Career Explorer",
    page_icon="üíº",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
st.markdown("""
<style>
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }

    @keyframes shimmer {
        0% {
            background-position: -1000px 0;
        }
        100% {
            background-position: 1000px 0;
        }
    }

    @keyframes gradientShift {
        0% {
            background-position: 0% 50%;
        }
        50% {
            background-position: 100% 50%;
        }
        100% {
            background-position: 0% 50%;
        }
    }

    /* –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π */
    .main-title {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #667eea 100%);
        background-size: 200% 200%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: gradientShift 3s ease infinite;
    }

    .subtitle {
        text-align: center;
        color: #888;
        font-size: 1.2rem;
        margin-bottom: 3rem;
        animation: fadeIn 1s ease-out;
    }

    .card {
        background: rgba(102, 126, 234, 0.1);
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
        animation: slideInLeft 0.5s ease-out;
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateX(5px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .card h4 {
        color: inherit;
        margin: 0;
    }

    .alternative-card {
        background: rgba(102, 126, 234, 0.05);
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(102, 126, 234, 0.2);
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border-left: 3px solid #667eea;
        animation: fadeIn 0.5s ease-out backwards;
    }

    .alternative-card:nth-child(1) { animation-delay: 0.1s; }
    .alternative-card:nth-child(2) { animation-delay: 0.2s; }
    .alternative-card:nth-child(3) { animation-delay: 0.3s; }
    .alternative-card:nth-child(4) { animation-delay: 0.4s; }
    .alternative-card:nth-child(5) { animation-delay: 0.5s; }

    .alternative-card:hover {
        transform: translateX(10px) scale(1.02);
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
        border-left-width: 5px;
    }

    .case-card {
        background: rgba(40, 167, 69, 0.1);
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #28a745;
        animation: slideInLeft 0.6s ease-out;
        transition: all 0.3s ease;
    }

    .case-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .case-card.medium {
        background: rgba(255, 193, 7, 0.1);
        border-left-color: #ffc107;
    }

    .case-card.hard {
        background: rgba(220, 53, 69, 0.1);
        border-left-color: #dc3545;
    }

    .case-card h4 {
        color: inherit;
        margin-top: 0.5rem;
    }

    .case-card p {
        color: inherit;
        margin-bottom: 0;
    }

    .difficulty-badge {
        display: inline-block;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .difficulty-easy {
        background: #28a745;
        color: white;
    }

    .difficulty-medium {
        background: #ffc107;
        color: #000;
    }

    .difficulty-hard {
        background: #dc3545;
        color: white;
    }

    .tech-badge {
        display: inline-block;
        background: #667eea;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        margin: 0.2rem;
        font-size: 0.9rem;
        font-weight: 500;
        animation: fadeIn 0.5s ease-out backwards;
        transition: all 0.2s ease;
    }

    .tech-badge:hover {
        transform: scale(1.1);
        background: #764ba2;
    }

    .tech-badge:nth-child(1) { animation-delay: 0.1s; }
    .tech-badge:nth-child(2) { animation-delay: 0.15s; }
    .tech-badge:nth-child(3) { animation-delay: 0.2s; }
    .tech-badge:nth-child(4) { animation-delay: 0.25s; }
    .tech-badge:nth-child(5) { animation-delay: 0.3s; }
    .tech-badge:nth-child(6) { animation-delay: 0.35s; }
    .tech-badge:nth-child(7) { animation-delay: 0.4s; }
    .tech-badge:nth-child(8) { animation-delay: 0.45s; }

    .sound-item {
        background: rgba(255, 193, 7, 0.2);
        padding: 0.8rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 3px solid #ffc107;
        color: inherit;
        animation: slideInLeft 0.5s ease-out backwards;
        transition: all 0.3s ease;
    }

    .sound-item:nth-child(1) { animation-delay: 0.1s; }
    .sound-item:nth-child(2) { animation-delay: 0.2s; }
    .sound-item:nth-child(3) { animation-delay: 0.3s; }

    .sound-item:hover {
        transform: translateX(5px);
        border-left-width: 5px;
    }

    .progress-indicator {
        background: rgba(102, 126, 234, 0.1);
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        text-align: center;
        animation: fadeIn 0.5s ease-out;
    }

    .progress-bar {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        height: 8px;
        border-radius: 4px;
        transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .progress-bar::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255, 255, 255, 0.3),
            transparent
        );
        animation: shimmer 2s infinite;
    }

    .typical-day-text {
        background: rgba(102, 126, 234, 0.05);
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        line-height: 1.8;
        color: inherit;
        margin: 1rem 0;
        animation: fadeIn 0.8s ease-out;
        transition: all 0.3s ease;
    }

    .typical-day-text:hover {
        background: rgba(102, 126, 234, 0.1);
        transform: scale(1.01);
    }

    .divider-text {
        text-align: center;
        color: #999;
        margin: 1.5rem 0;
        font-size: 0.9rem;
        animation: pulse 2s ease-in-out infinite;
    }

    /* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ Streamlit */
    .stButton > button {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .stButton > button:active {
        transform: translateY(0);
    }

    .stButton > button::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.3);
        transform: translate(-50%, -50%);
        transition: width 0.6s, height 0.6s;
    }

    .stButton > button:hover::before {
        width: 300px;
        height: 300px;
    }

    /* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã */
    @media (prefers-color-scheme: dark) {
        .subtitle {
            color: #aaa;
        }

        .card {
            background: rgba(102, 126, 234, 0.15);
        }

        .alternative-card {
            background: rgba(102, 126, 234, 0.1);
        }

        .case-card {
            background: rgba(40, 167, 69, 0.15);
        }

        .case-card.medium {
            background: rgba(255, 193, 7, 0.15);
        }

        .case-card.hard {
            background: rgba(220, 53, 69, 0.15);
        }

        .sound-item {
            background: rgba(255, 193, 7, 0.25);
        }

        .typical-day-text {
            background: rgba(102, 126, 234, 0.1);
        }
    }

    /* Fade-in –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    .main .block-container {
        animation: fadeIn 0.5s ease-out;
    }
</style>
""", unsafe_allow_html=True)


# API —Ñ—É–Ω–∫—Ü–∏–∏
def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5, headers=HEADERS)
        return response.status_code == 200
    except:
        return False


def start_session(user_message: str, user_id: Optional[int] = None) -> dict:
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    payload = {
        "user_message": user_message,
        "user_id": user_id
    }
    response = requests.post(f"{API_BASE_URL}/start", json=payload, headers=HEADERS)
    response.raise_for_status()
    return response.json()


def submit_answer(session_id: int, answer: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    payload = {
        "session_id": session_id,
        "answer": answer
    }
    response = requests.post(f"{API_BASE_URL}/answer", json=payload, headers=HEADERS)
    response.raise_for_status()
    return response.json()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'step' not in st.session_state:
    st.session_state.step = 'initial'
if 'session_id' not in st.session_state:
    st.session_state.session_id = None
if 'current_question' not in st.session_state:
    st.session_state.current_question = None
if 'current_stage' not in st.session_state:
    st.session_state.current_stage = None
if 'alternatives' not in st.session_state:
    st.session_state.alternatives = None
if 'profile' not in st.session_state:
    st.session_state.profile = None
if 'initial_message' not in st.session_state:
    st.session_state.initial_message = ""
if 'question_count' not in st.session_state:
    st.session_state.question_count = 0


def reset_session():
    """–°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏"""
    st.session_state.step = 'initial'
    st.session_state.session_id = None
    st.session_state.current_question = None
    st.session_state.current_stage = None
    st.session_state.alternatives = None
    st.session_state.profile = None
    st.session_state.initial_message = ""
    st.session_state.question_count = 0


def get_stage_emoji(stage: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è —Å—Ç–∞–¥–∏–∏"""
    emojis = {
        'profession_check': 'üîç',
        'profession_alternatives': 'üîÑ',
        'profession_details': 'üìã',
        'vibe_question': '‚ú®'
    }
    return emojis.get(stage, '‚ùì')


def get_stage_label(stage: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏"""
    labels = {
        'profession_check': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
        'profession_alternatives': '–í—ã–±–æ—Ä –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã',
        'profession_details': '–£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π',
        'vibe_question': '–û–±—â–∏–π –≤–∞–π–±'
    }
    return labels.get(stage, '–£—Ç–æ—á–Ω–µ–Ω–∏–µ')


def get_difficulty_class(difficulty: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    return f"difficulty-{difficulty}"


# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<div class="main-title">üöÄ Career Explorer</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">–£–∑–Ω–∞–π –≤–∞–π–± —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</div>', unsafe_allow_html=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    if check_api_health():
        st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.info(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {API_BASE_URL}")

    if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        reset_session()
        st.rerun()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏
    if st.session_state.step != 'initial' and st.session_state.step != 'result':
        st.divider()
        st.markdown("### üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")

        stage = st.session_state.current_stage
        stage_label = get_stage_label(stage) if stage else "–ù–∞—á–∞–ª–æ"

        st.markdown(f"**–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:** {get_stage_emoji(stage)} {stage_label}")

        if stage == 'profession_details':
            st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {st.session_state.question_count}/2")
            progress = st.session_state.question_count / 2
            st.progress(progress)

    st.divider()
    st.caption("–í–µ—Ä—Å–∏—è 2.0 ‚Ä¢ Multi-step clarification")

# ===== –®–ê–ì 1: –ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å =====
if st.session_state.step == 'initial':
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        st.markdown("### üí¨ –û –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?")

        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"):
            st.markdown("""
            - –ö–∞–∫–æ–≤–æ —ç—Ç–æ ‚Äî –±—ã—Ç—å frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ?
            - –ß—Ç–æ –¥–µ–ª–∞–µ—Ç DevOps-–∏–Ω–∂–µ–Ω–µ—Ä –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?
            - –•–æ—á—É –±—ã—Ç—å –≤—Ä–∞—á–æ–º-—Ö–∏—Ä—É—Ä–≥–æ–º
            - –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —É—á–∏—Ç–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
            - –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–∞–±–æ—Ç–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞ –≤ –°–ú–ò
            - –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ?
            - –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –≤ digital-–∞–≥–µ–Ω—Ç—Å—Ç–≤–µ?
            """)

        user_question = st.text_area(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
            height=100,
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –±—ã—Ç—å DevOps-–∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ",
            max_chars=500,
            value=st.session_state.initial_message
        )

        if st.button("üîç –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", type="primary", use_container_width=True):
            if len(user_question.strip()) < 10:
                st.error("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            else:
                with st.spinner("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é..."):
                    try:
                        result = start_session(user_question)
                        st.session_state.session_id = result['session_id']
                        st.session_state.current_question = result['question']
                        st.session_state.current_stage = result['stage']
                        st.session_state.alternatives = result.get('alternatives')
                        st.session_state.initial_message = user_question
                        st.session_state.question_count = 1 if result['stage'] == 'profession_details' else 0
                        st.session_state.step = 'clarification'
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ===== –®–ê–ì 2: –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã =====
elif st.session_state.step == 'clarification':
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        stage_emoji = get_stage_emoji(st.session_state.current_stage)
        stage_label = get_stage_label(st.session_state.current_stage)

        st.markdown(f"### {stage_emoji} {stage_label}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–Ω–µ—Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è)
        if st.session_state.alternatives:
            st.markdown(f"**{st.session_state.current_question}**")
            st.markdown("---")

            st.markdown("#### –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")

            for alt in st.session_state.alternatives:
                if st.button(
                        f"üéØ {alt}",
                        key=f"alt_{alt}",
                        use_container_width=True
                ):
                    with st.spinner("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—ã–±–æ—Ä..."):
                        try:
                            result = submit_answer(st.session_state.session_id, alt)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                            if 'position_title' in result:
                                # –≠—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å
                                st.session_state.profile = result
                                st.session_state.step = 'result'
                            else:
                                # –≠—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                                st.session_state.current_question = result['question']
                                st.session_state.current_stage = result['stage']
                                st.session_state.alternatives = result.get('alternatives')

                                if result['stage'] == 'profession_details':
                                    st.session_state.question_count += 1

                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            st.markdown('<div class="divider-text">‚Äî –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî</div>', unsafe_allow_html=True)

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            custom_profession = st.text_input(
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –ü—Å–∏—Ö–æ–ª–æ–≥, Data Scientist...",
                key="custom_profession_input"
            )

            if st.button("‚úçÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", type="secondary", use_container_width=True):
                if len(custom_profession.strip()) < 3:
                    st.error("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
                else:
                    with st.spinner("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç..."):
                        try:
                            result = submit_answer(st.session_state.session_id, custom_profession)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                            if 'position_title' in result:
                                st.session_state.profile = result
                                st.session_state.step = 'result'
                            else:
                                st.session_state.current_question = result['question']
                                st.session_state.current_stage = result['stage']
                                st.session_state.alternatives = result.get('alternatives')

                                if result['stage'] == 'profession_details':
                                    st.session_state.question_count += 1

                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        else:
            st.markdown(f"**{st.session_state.current_question}**")

            user_answer = st.text_input(
                "–í–∞—à –æ—Ç–≤–µ—Ç:",
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...",
                key="answer_input"
            )

            if st.button("‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", type="primary", use_container_width=True):
                if len(user_answer.strip()) < 1:
                    st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç")
                else:
                    with st.spinner("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç..."):
                        try:
                            result = submit_answer(st.session_state.session_id, user_answer)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                            if 'position_title' in result:
                                # –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                                st.session_state.profile = result
                                st.session_state.step = 'result'
                            else:
                                # –≠—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                                st.session_state.current_question = result['question']
                                st.session_state.current_stage = result['stage']
                                st.session_state.alternatives = result.get('alternatives')

                                if result['stage'] == 'profession_details':
                                    st.session_state.question_count += 1

                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ===== –®–ê–ì 3: –†–µ–∑—É–ª—å—Ç–∞—Ç =====
elif st.session_state.step == 'result':
    if st.session_state.profile:
        profile = st.session_state.profile

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        st.markdown(f"## üéØ {profile['position_title']}")
        st.markdown("---")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ 3 –∫–æ–ª–æ–Ω–∫–∏
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("### üéµ –ó–≤—É–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
            for sound in profile['sounds']:
                st.markdown(f'<div class="sound-item">üîä {sound}</div>', unsafe_allow_html=True)

        with col2:
            st.markdown("### üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç")
            st.markdown(f'<div class="card"><h4>{profile["career_growth"]}</h4></div>', unsafe_allow_html=True)

        with col3:
            st.markdown("### ‚öñÔ∏è Work-Life Balance")
            st.markdown(f'<div class="card"><h4>{profile["balance_score"]}</h4></div>', unsafe_allow_html=True)

        # –ü–æ–ª—å–∑–∞
        st.markdown("### üíé –ì–ª–∞–≤–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å")
        st.info(profile['benefit'])

        # –¢–∏–ø–∏—á–Ω—ã–π –¥–µ–Ω—å
        st.markdown("### üìÖ –¢–∏–ø–∏—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å")
        st.markdown(f'<div class="typical-day-text">{profile["typical_day"]}</div>', unsafe_allow_html=True)

        # –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        st.markdown("### üéØ –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        for case in profile['real_cases']:
            difficulty_class = get_difficulty_class(case['difficulty'])
            st.markdown(f"""
            <div class="case-card {case['difficulty']}">
                <span class="difficulty-badge {difficulty_class}">{case['difficulty'].upper()}</span>
                <h4>{case['title']}</h4>
                <p>{case['description']}</p>
            </div>
            """, unsafe_allow_html=True)

        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –≤–∏–∑—É–∞–ª
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –Ω–∞–≤—ã–∫–∏")
            for tech in profile['tech_stack']:
                st.markdown(f'<span class="tech-badge">{tech}</span>', unsafe_allow_html=True)

        with col2:
            st.markdown("### üé® –ß—Ç–æ —É–≤–∏–¥–∏—à—å –≤ —Ä–∞–±–æ—Ç–µ")
            for visual in profile['visual']:
                st.markdown(f"- {visual}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        st.markdown("---")
        if st.button("üîç –ò–∑—É—á–∏—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", type="primary", use_container_width=True):
            reset_session()
            st.rerun()

    else:
        st.error("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            reset_session()
            st.rerun()
